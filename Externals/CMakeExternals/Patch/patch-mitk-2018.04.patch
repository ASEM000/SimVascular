diff -rupN original/CMakeLists.txt patch/CMakeLists.txt
--- original/CMakeLists.txt	2018-02-27 21:04:17.000000000 -0800
+++ patch/CMakeLists.txt	2018-03-02 19:07:56.000000000 -0800
@@ -286,10 +286,10 @@ elseif(MITK_USE_Python)
     message("> Forcing MITK_USE_Numpy to ON because of MITK_USE_Python")
     set(MITK_USE_Numpy ON CACHE BOOL "Use Numpy" FORCE)
   endif()
-  if(NOT MITK_USE_SimpleITK)
-    message("> Forcing MITK_USE_SimpleITK to ON because of MITK_USE_Python")
-    set(MITK_USE_SimpleITK ON CACHE BOOL "Use SimpleITK" FORCE)
-  endif()
+  #if(NOT MITK_USE_SimpleITK)
+  #  message("> Forcing MITK_USE_SimpleITK to ON because of MITK_USE_Python")
+  #  set(MITK_USE_SimpleITK ON CACHE BOOL "Use SimpleITK" FORCE)
+  #endif()

   option(MITK_USE_SYSTEM_PYTHON "Use the system python runtime" OFF)
   if(MITK_USE_SYSTEM_PYTHON)
diff -rupN original/CMakeExternals/SimpleITK.cmake patch/CMakeExternals/SimpleITK.cmake
--- original/CMakeExternals/SimpleITK.cmake	2018-06-01 19:56:50.000000000 -0700
+++ patch/CMakeExternals/SimpleITK.cmake	2018-06-01 20:47:54.000000000 -0700
@@ -115,11 +115,19 @@ if(MITK_USE_SimpleITK)
         STRING(REPLACE " " "\ " _install_dir ${_install_dir})
       endif()
 
-      ExternalProject_Add_Step(${proj} sitk_python_install_step
-        COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${_pythonpath}$<SEMICOLON>${ep_prefix}/Lib/site-packages ${PYTHON_EXECUTABLE} Packaging/setup.py install --prefix=${_install_dir}
-        DEPENDEES install
-        WORKING_DIRECTORY ${_sitk_build_dir}/SimpleITK-build/Wrapping/Python/
-      )
+      if(APPLE)
+        ExternalProject_Add_Step(${proj} sitk_python_install_step
+          COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${_pythonpath}:${ep_prefix}/Lib/site-packages ${PYTHON_EXECUTABLE} Packaging/setup.py install --prefix=${_install_dir}
+          DEPENDEES install
+          WORKING_DIRECTORY ${_sitk_build_dir}/SimpleITK-build/Wrapping/Python/
+        )
+      else()
+        ExternalProject_Add_Step(${proj} sitk_python_install_step
+          COMMAND ${CMAKE_COMMAND} -E env PYTHONPATH=${_pythonpath}$<SEMICOLON>${ep_prefix}/Lib/site-packages ${PYTHON_EXECUTABLE} Packaging/setup.py install --prefix=${_install_dir}
+          DEPENDEES install
+          WORKING_DIRECTORY ${_sitk_build_dir}/SimpleITK-build/Wrapping/Python/
+        )
+      endif()
 
     endif()
 
diff -rupN original/CMake/PackageDepends/MITK_VTK_Config.cmake patch/CMake/PackageDepends/MITK_VTK_Config.cmake
--- original/CMake/PackageDepends/MITK_VTK_Config.cmake	2018-03-03 08:36:22.000000000 -0800
+++ patch/CMake/PackageDepends/MITK_VTK_Config.cmake	2018-03-03 14:20:33.000000000 -0800
@@ -1,4 +1,5 @@
-find_package(VTK COMPONENTS ${VTK_REQUIRED_COMPONENTS_BY_MODULE} REQUIRED)
+#find_package(VTK COMPONENTS ${VTK_REQUIRED_COMPONENTS_BY_MODULE} REQUIRED)
+find_package(VTK REQUIRED)
 if(VTK_FOUND AND NOT VTK_BUILD_SHARED_LIBS)
   message(FATAL_ERROR "MITK only supports a VTK which was built with shared libraries. Turn on BUILD_SHARED_LIBS in your VTK config.")
 diff -rupN original/CMake/mitkFunctionGetLibrarySearchPaths.cmake patch/CMake/mitkFunctionGetLibrarySearchPaths.cmake
--- original/CMake/mitkFunctionGetLibrarySearchPaths.cmake	2018-05-28 17:40:01.000000000 -0700
+++ patch/CMake/mitkFunctionGetLibrarySearchPaths.cmake	2018-06-03 07:17:00.000000000 -0700
@@ -44,7 +44,7 @@ function(mitkFunctionGetLibrarySearchPat
 
   if(MITK_USE_HDF5)
     FIND_PACKAGE(HDF5 COMPONENTS C HL NO_MODULE REQUIRED shared)
-    get_target_property(_location hdf5-shared LOCATION)
+    get_target_property(_location hdf5::hdf5-shared LOCATION)
     get_filename_component(_location ${_location} PATH)
     list(APPEND _additional_paths ${_location})
 endif()
diff -rupN original/Modules/PhotoacousticsAlgorithms/include/mitkPhotoacousticBeamformingSettings.h patch/Modules/PhotoacousticsAlgorithms/include/mitkPhotoacousticBeamformingSettings.h
--- original/Modules/PhotoacousticsAlgorithms/include/mitkPhotoacousticBeamformingSettings.h	2018-03-03 08:36:23.000000000 -0800
+++ patch/Modules/PhotoacousticsAlgorithms/include/mitkPhotoacousticBeamformingSettings.h	2018-03-03 14:20:35.000000000 -0800
@@ -120,18 +120,18 @@ namespace mitk {
     */
     static bool SettingsChangedOpenCL(const BeamformingSettings& lhs, const BeamformingSettings& rhs)
     {
-      return !((abs(lhs.Angle - rhs.Angle) < 0.01f) && // 0.01 degree error margin
+      return !((fabs(lhs.Angle - rhs.Angle) < 0.01f) && // 0.01 degree error margin
         (lhs.Apod == rhs.Apod) &&
         (lhs.DelayCalculationMethod == rhs.DelayCalculationMethod) &&
         (lhs.isPhotoacousticImage == rhs.isPhotoacousticImage) &&
-        (abs(lhs.Pitch - rhs.Pitch) < 0.000001f) && // 0.0001 mm error margin
+        (fabs(lhs.Pitch - rhs.Pitch) < 0.000001f) && // 0.0001 mm error margin
         (lhs.ReconstructionLines == rhs.ReconstructionLines) &&
-        (abs(lhs.RecordTime - rhs.RecordTime) < 0.00000001f) && // 10 ns error margin
+        (fabs(lhs.RecordTime - rhs.RecordTime) < 0.00000001f) && // 10 ns error margin
         (lhs.SamplesPerLine == rhs.SamplesPerLine) &&
-        (abs(lhs.SpeedOfSound - rhs.SpeedOfSound) < 0.01f) &&
-        (abs(lhs.TimeSpacing - rhs.TimeSpacing) < 0.00000000001f) && //0.01 ns error margin
+        (fabs(lhs.SpeedOfSound - rhs.SpeedOfSound) < 0.01f) &&
+        (fabs(lhs.TimeSpacing - rhs.TimeSpacing) < 0.00000000001f) && //0.01 ns error margin
         (lhs.TransducerElements == rhs.TransducerElements));
     }
   };
 }
-#endif
\ No newline at end of file
+#endif
diff -rupN original/Modules/PhotoacousticsAlgorithms/source/OpenCLFilter/mitkPhotoacousticBModeFilter.cpp patch/Modules/PhotoacousticsAlgorithms/source/OpenCLFilter/mitkPhotoacousticBModeFilter.cpp
--- original/Modules/PhotoacousticsAlgorithms/source/OpenCLFilter/mitkPhotoacousticBModeFilter.cpp	2018-03-03 08:36:23.000000000 -0800
+++ patch/Modules/PhotoacousticsAlgorithms/source/OpenCLFilter/mitkPhotoacousticBModeFilter.cpp	2018-03-03 14:20:35.000000000 -0800
@@ -205,17 +205,17 @@ void mitk::PhotoacousticBModeFilter::Gen
   if(!m_UseLogFilter)
     for (unsigned int i = 0; i < size; ++i)
     {
-      OutputData[i] = abs(InputData[i]);
+      OutputData[i] = fabs(InputData[i]);
     }
   else
   {
     for (unsigned int i = 0; i < size; ++i)
     {
-      OutputData[i] = log(abs(InputData[i]));
+      OutputData[i] = log(fabs(InputData[i]));
     }
   }

   output->SetImportVolume(OutputData, 0, 0, mitk::Image::ImportMemoryManagementType::ManageMemory);

   m_TimeOfHeaderInitialization.Modified();
-}
\ No newline at end of file
+}
diff -rupN original/Modules/Core/include/mitkExtractSliceFilter.h patch/Modules/Core/include/mitkExtractSliceFilter.h
--- original/Modules/Core/include/mitkExtractSliceFilter.h	2018-02-26 17:02:30.000000000 -0800
+++ patch/Modules/Core/include/mitkExtractSliceFilter.h	2018-04-18 09:42:39.000000000 -0700
@@ -95,6 +95,9 @@ namespace mitk
     {
       this->m_InPlaneResampleExtentByGeometry = inPlaneResampleExtentByGeometry;
     }
+    void SetInPlaneResampleSizeByGeometry(bool inPlaneResampleSizeByGeometry){ this->m_InPlaneResampleSizeByGeometry = inPlaneResampleSizeByGeometry; }
+
+    void SetInPlaneResampleExtentByMinimumSpacing(bool inPlaneResampleExtentByMinimumSpacing){this->m_InPlaneResampleExtentByMinimumSpacing = inPlaneResampleExtentByMinimumSpacing;}

     /** \brief Sets the output dimension of the slice*/
     void SetOutputDimensionality(unsigned int dimension) { this->m_OutputDimension = dimension; }
@@ -189,6 +192,10 @@ namespace mitk

     bool m_InPlaneResampleExtentByGeometry; // Resampling grid corresponds to:  false->image    true->worldgeometry

+    bool m_InPlaneResampleSizeByGeometry;//Use Renderer Plane extents
+
+    bool m_InPlaneResampleExtentByMinimumSpacing;
+
     mitk::ScalarType *m_OutPutSpacing;

     bool m_VtkOutputRequested;
diff -rupN original/Modules/Core/src/Algorithms/mitkExtractSliceFilter.cpp patch/Modules/Core/src/Algorithms/mitkExtractSliceFilter.cpp
--- original/Modules/Core/src/Algorithms/mitkExtractSliceFilter.cpp	2018-02-26 17:02:30.000000000 -0800
+++ patch/Modules/Core/src/Algorithms/mitkExtractSliceFilter.cpp	2018-04-18 09:46:44.000000000 -0700
@@ -41,6 +41,8 @@ mitk::ExtractSliceFilter::ExtractSliceFi
   m_InterpolationMode = ExtractSliceFilter::RESLICE_NEAREST;
   m_ResliceTransform = nullptr;
   m_InPlaneResampleExtentByGeometry = false;
+  m_InPlaneResampleSizeByGeometry = false;
+  m_InPlaneResampleExtentByMinimumSpacing = false;
   m_OutPutSpacing = new mitk::ScalarType[2];
   m_OutputDimension = 2;
   m_ZSpacing = 1.0;
@@ -194,8 +196,15 @@ void mitk::ExtractSliceFilter::GenerateD
         // Resampling grid corresponds to the current world geometry. This
         // means that the spacing of the output 2D image depends on the
         // currently selected world geometry, and *not* on the image itself.
-        extent[0] = m_WorldGeometry->GetExtent(0);
-        extent[1] = m_WorldGeometry->GetExtent(1);
+        extent[0] = planeGeometry->GetExtent( 0 );
+        extent[1] = planeGeometry->GetExtent( 1 );
+      }
+      else if(m_InPlaneResampleExtentByMinimumSpacing)
+      {
+    	    const mitk::Vector3D &imageSpacing = inputTimeGeometry->GetGeometryForTimeStep(0)->GetSpacing();
+            double minSpacing=std::min(imageSpacing[0],std::min(imageSpacing[1],imageSpacing[2]));
+            extent[0]=planeGeometry->GetExtentInMM( 0 )/minSpacing;
+            extent[1]=planeGeometry->GetExtentInMM( 1 )/minSpacing;
       }
       else
       {
@@ -316,25 +325,28 @@ void mitk::ExtractSliceFilter::GenerateD
   int xMin, xMax, yMin, yMax;

   xMin = yMin = 0;
-  xMax = static_cast<int>(extent[0]);
-  yMax = static_cast<int>(extent[1]);
+  xMax = static_cast< int >( std::round(extent[0]));
+  yMax = static_cast< int >( std::round(extent[1]));

-  if (m_WorldGeometry->GetReferenceGeometry())
+  if(!m_InPlaneResampleSizeByGeometry)
   {
     double sliceBounds[6];
-    for (auto &sliceBound : sliceBounds)
+    if (m_WorldGeometry->GetReferenceGeometry())
     {
-      sliceBound = 0.0;
-    }
+      for (auto &sliceBound : sliceBounds)
+      {
+        sliceBound = 0.0;
+      }

-    if (this->GetClippedPlaneBounds(m_WorldGeometry->GetReferenceGeometry(), planeGeometry, sliceBounds))
-    {
-      // Calculate output extent (integer values)
-      xMin = static_cast<int>(sliceBounds[0] / m_OutPutSpacing[0] + 0.5);
-      xMax = static_cast<int>(sliceBounds[1] / m_OutPutSpacing[0] + 0.5);
-      yMin = static_cast<int>(sliceBounds[2] / m_OutPutSpacing[1] + 0.5);
-      yMax = static_cast<int>(sliceBounds[3] / m_OutPutSpacing[1] + 0.5);
-    } // ELSE we use the default values
+      if (this->GetClippedPlaneBounds(m_WorldGeometry->GetReferenceGeometry(), planeGeometry, sliceBounds))
+      {
+        // Calculate output extent (integer values)
+        xMin = static_cast<int>(sliceBounds[0] / m_OutPutSpacing[0] + 0.5);
+        xMax = static_cast<int>(sliceBounds[1] / m_OutPutSpacing[0] + 0.5);
+        yMin = static_cast<int>(sliceBounds[2] / m_OutPutSpacing[1] + 0.5);
+        yMax = static_cast<int>(sliceBounds[3] / m_OutPutSpacing[1] + 0.5);
+      } // ELSE we use the default values
+    }
   }

   // Set the output extents! First included pixel index and last included pixel index
diff -rupN original/Modules/Core/src/DataManagement/mitkSlicedGeometry3D.cpp patch/Modules/Core/src/DataManagement/mitkSlicedGeometry3D.cpp
--- original/Modules/Core/src/DataManagement/mitkSlicedGeometry3D.cpp	2018-02-26 17:02:31.000000000 -0800
+++ patch/Modules/Core/src/DataManagement/mitkSlicedGeometry3D.cpp	2018-04-18 09:48:19.000000000 -0700
@@ -65,7 +65,7 @@ mitk::SlicedGeometry3D::SlicedGeometry3D
       }
       else
       {
-        PlaneGeometry *geometry2D = other.m_PlaneGeometries[s]->Clone();
+        PlaneGeometry::Pointer geometry2D = other.m_PlaneGeometries[s]->Clone();
         assert(geometry2D != nullptr);
         SetPlaneGeometry(geometry2D, s);
       }
diff -rupN original/Modules/Core/src/Rendering/mitkImageVtkMapper2D.cpp patch/Modules/Core/src/Rendering/mitkImageVtkMapper2D.cpp
--- original/Modules/Core/src/Rendering/mitkImageVtkMapper2D.cpp	2018-05-28 17:36:34.000000000 -0700
+++ patch/Modules/Core/src/Rendering/mitkImageVtkMapper2D.cpp	2018-06-01 20:18:02.000000000 -0700
@@ -54,6 +54,8 @@ See LICENSE.txt or http://www.mitk.org f
 #include <vtkPolyDataMapper.h>
 #include <vtkProperty.h>
 #include <vtkTransform.h>
+#include <vtkImageGradientMagnitude.h>
+#include <vtkImageHistogramStatistics.h>

 // ITK
 #include <itkRGBAPixel.h>
@@ -162,6 +164,15 @@ void mitk::ImageVtkMapper2D::GenerateDat
   datanode->GetBoolProperty("in plane resample extent by geometry", inPlaneResampleExtentByGeometry, renderer);
   localStorage->m_Reslicer->SetInPlaneResampleExtentByGeometry(inPlaneResampleExtentByGeometry);

+  bool inPlaneResampleSizeByGeometry = false;
+  datanode->GetBoolProperty("in plane resample size by geometry", inPlaneResampleSizeByGeometry, renderer);
+  localStorage->m_Reslicer->SetInPlaneResampleSizeByGeometry(inPlaneResampleSizeByGeometry);
+
+  bool inPlaneResampleExtentByMinimumSpacing = false;
+  datanode->GetBoolProperty("in plane resample extent by minimum spacing", inPlaneResampleExtentByMinimumSpacing, renderer);
+  localStorage->m_Reslicer->SetInPlaneResampleExtentByMinimumSpacing(inPlaneResampleExtentByMinimumSpacing);
+
+
   // Initialize the interpolation mode for resampling; switch to nearest
   // neighbor if the input image is too small.
   if ((image->GetDimension() >= 3) && (image->GetDimension(2) > 1))
@@ -283,6 +294,61 @@ void mitk::ImageVtkMapper2D::GenerateDat
     localStorage->m_ReslicedImage = localStorage->m_Reslicer->GetVtkOutput();
   }

+  bool showGradient= false;
+  datanode->GetBoolProperty("show gradient", showGradient, renderer);
+  if (showGradient)
+  {
+	  vtkSmartPointer<vtkImageGradientMagnitude> gradientFilter = vtkSmartPointer<vtkImageGradientMagnitude>::New();
+      gradientFilter->HandleBoundariesOn();
+      gradientFilter->SetInputData(localStorage->m_ReslicedImage);
+      gradientFilter->Update();
+
+      // "background" pixels produce very large gradients at border
+      int extent[6];
+      gradientFilter->GetOutput()->GetExtent(extent);
+
+      for (int y = extent[2]; y <=extent[3] ; ++y)
+      {
+          for (int x = extent[0]; x <= extent[1]; ++x)
+          {
+              if (fabs(localStorage->m_ReslicedImage->GetScalarComponentAsDouble(x, y, 0, 0) - (-32768.0)) < 1e-3)
+              {
+            	  gradientFilter->GetOutput()->SetScalarComponentFromDouble(x, y, 0, 0, 0);
+              }
+
+              int offsets[][2] = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };
+
+              for (size_t i = 0; i < sizeof(offsets) / sizeof(offsets[0]); ++i) {
+                  int xoff = x + offsets[i][0];
+                  int yoff = y + offsets[i][1];
+
+                  if (xoff < extent[0] || xoff > extent[1] || yoff < extent[2] || yoff > extent[3]) {
+                      continue;
+                  }
+
+                  if (fabs(localStorage->m_ReslicedImage->GetScalarComponentAsDouble(xoff, yoff, 0, 0) - (-32768.0)) < 1e-3)
+                  {
+                	  gradientFilter->GetOutput()->SetScalarComponentFromDouble(x, y, 0, 0, 0);
+                      break;
+                  }
+              }
+          }
+      }
+
+      localStorage->m_ReslicedImage = gradientFilter->GetOutput();
+
+      vtkSmartPointer<vtkImageHistogramStatistics> stats = vtkSmartPointer<vtkImageHistogramStatistics>::New();
+      stats->SetInputData(localStorage->m_ReslicedImage);
+      stats->GenerateHistogramImageOff();
+      stats->Update();
+
+      mitk::LevelWindow levelWindow;
+      levelWindow.SetRangeMinMax(stats->GetAutoRange()[0], stats->GetAutoRange()[1]);
+      levelWindow.SetWindowBounds(stats->GetAutoRange()[0], stats->GetAutoRange()[1]);
+      datanode->SetLevelWindow(levelWindow, renderer, "gradientlevelwindow");
+  }
+
+
   // Bounds information for reslicing (only reuqired if reference geometry
   // is present)
   // this used for generating a vtkPLaneSource with the right size
@@ -291,7 +357,19 @@ void mitk::ImageVtkMapper2D::GenerateDat
   {
     sliceBound = 0.0;
   }
-  localStorage->m_Reslicer->GetClippedPlaneBounds(sliceBounds);
+  if(inPlaneResampleSizeByGeometry)
+  {
+      double widthInMM = planeGeometry->GetExtentInMM( 0 );
+      double heightInMM = planeGeometry->GetExtentInMM( 1 );
+      sliceBounds[0] = 0.0;
+      sliceBounds[1] = widthInMM;
+      sliceBounds[2] = 0.0;
+      sliceBounds[3] = heightInMM;
+  }
+  else
+  {
+    localStorage->m_Reslicer->GetClippedPlaneBounds(sliceBounds);
+  }

   // get the spacing of the slice
   localStorage->m_mmPerPixel = localStorage->m_Reslicer->GetOutputSpacing();
@@ -303,15 +381,28 @@ void mitk::ImageVtkMapper2D::GenerateDat
     {
       textureClippingBound = 0.0;
     }
-    // Calculate the actual bounds of the transformed plane clipped by the
-    // dataset bounding box; this is required for drawing the texture at the
-    // correct position during 3D mapping.
-    mitk::PlaneClipping::CalculateClippedPlaneBounds(image->GetGeometry(), planeGeometry, textureClippingBounds);
-
-    textureClippingBounds[0] = static_cast<int>(textureClippingBounds[0] / localStorage->m_mmPerPixel[0] + 0.5);
-    textureClippingBounds[1] = static_cast<int>(textureClippingBounds[1] / localStorage->m_mmPerPixel[0] + 0.5);
-    textureClippingBounds[2] = static_cast<int>(textureClippingBounds[2] / localStorage->m_mmPerPixel[1] + 0.5);
-    textureClippingBounds[3] = static_cast<int>(textureClippingBounds[3] / localStorage->m_mmPerPixel[1] + 0.5);
+    if(inPlaneResampleSizeByGeometry)
+    {
+        double widthInMM = planeGeometry->GetExtentInMM( 0 );
+        double heightInMM = planeGeometry->GetExtentInMM( 1 );
+
+        textureClippingBounds[0] = 0.0;
+        textureClippingBounds[1] = widthInMM / localStorage->m_mmPerPixel[0];
+        textureClippingBounds[2] = 0.0;
+        textureClippingBounds[3] = heightInMM / localStorage->m_mmPerPixel[1];
+    }
+    else
+    {
+        // Calculate the actual bounds of the transformed plane clipped by the
+        // dataset bounding box; this is required for drawing the texture at the
+        // correct position during 3D mapping.
+        mitk::PlaneClipping::CalculateClippedPlaneBounds( image->GetGeometry(), planeGeometry, textureClippingBounds );
+
+        textureClippingBounds[0] = static_cast< int >( textureClippingBounds[0] / localStorage->m_mmPerPixel[0] + 0.5 );
+        textureClippingBounds[1] = static_cast< int >( textureClippingBounds[1] / localStorage->m_mmPerPixel[0] + 0.5 );
+        textureClippingBounds[2] = static_cast< int >( textureClippingBounds[2] / localStorage->m_mmPerPixel[1] + 0.5 );
+        textureClippingBounds[3] = static_cast< int >( textureClippingBounds[3] / localStorage->m_mmPerPixel[1] + 0.5 );
+    }

     // clipping bounds for cutting the image
     localStorage->m_LevelWindowFilter->SetClippingBounds(textureClippingBounds);
@@ -445,7 +536,10 @@ void mitk::ImageVtkMapper2D::ApplyLevelW
   LocalStorage *localStorage = this->GetLocalStorage(renderer);

   LevelWindow levelWindow;
-  this->GetDataNode()->GetLevelWindow(levelWindow, renderer, "levelwindow");
+//  this->GetDataNode()->GetLevelWindow(levelWindow, renderer, "levelwindow");
+  bool showGradient = false;
+  this->GetDataNode()->GetBoolProperty("show gradient", showGradient, renderer);
+  this->GetDataNode()->GetLevelWindow( levelWindow, renderer, showGradient? "gradientlevelwindow" : "levelwindow" );
   localStorage->m_LevelWindowFilter->GetLookupTable()->SetRange(levelWindow.GetLowerWindowBound(),
                                                                 levelWindow.GetUpperWindowBound());

@@ -602,8 +696,7 @@ void mitk::ImageVtkMapper2D::ApplyLookup
   vtkLookupTable *usedLookupTable = localStorage->m_ColorLookupTable;

   // If lookup table or transferfunction use is requested...
-  mitk::LookupTableProperty::Pointer lookupTableProp =
-    dynamic_cast<mitk::LookupTableProperty *>(this->GetDataNode()->GetProperty("LookupTable"));
+  mitk::LookupTableProperty::Pointer lookupTableProp = dynamic_cast<mitk::LookupTableProperty*>(this->GetDataNode()->GetProperty("LookupTable", renderer));

   if (lookupTableProp.IsNotNull()) // is a lookuptable set?
   {
@@ -702,6 +795,8 @@ void mitk::ImageVtkMapper2D::SetDefaultP
     node->AddProperty("reslice interpolation", mitk::VtkResliceInterpolationProperty::New());
   node->AddProperty("texture interpolation", mitk::BoolProperty::New(false));
   node->AddProperty("in plane resample extent by geometry", mitk::BoolProperty::New(false));
+  node->AddProperty( "in plane resample size by geometry", mitk::BoolProperty::New( false ) );
+  node->AddProperty( "in plane resample extent by minimum spacing", mitk::BoolProperty::New( false ) );
   node->AddProperty("bounding box", mitk::BoolProperty::New(false));

   mitk::RenderingModeProperty::Pointer renderingModeProperty = mitk::RenderingModeProperty::New();
diff -rupN original/Modules/Core/src/Rendering/mitkPlaneGeometryDataVtkMapper3D.cpp patch/Modules/Core/src/Rendering/mitkPlaneGeometryDataVtkMapper3D.cpp
--- original/Modules/Core/src/Rendering/mitkPlaneGeometryDataVtkMapper3D.cpp	2018-02-26 17:02:31.000000000 -0800
+++ patch/Modules/Core/src/Rendering/mitkPlaneGeometryDataVtkMapper3D.cpp	2018-04-18 09:54:58.000000000 -0700
@@ -302,6 +302,13 @@ namespace mitk
         tubeRadius = sqrt(m_SurfaceCreator->GetBoundingBox()->GetDiagonalLength2()) / 450.0;
       }

+      bool useGeometryBoundingBox = false;
+      if(GetDataNode()->GetBoolProperty("in plane resample size by geometry", useGeometryBoundingBox, renderer))
+      {
+          if(useGeometryBoundingBox)
+        	  m_SurfaceCreator->SetUseBoundingBox(false);
+      }
+
       // Calculate the surface of the PlaneGeometry
       m_SurfaceCreator->Update();
       Surface *surface = m_SurfaceCreator->GetOutput();
diff -rupN original/Modules/CppMicroServices/core/src/util/usThreads_p.h patch/Modules/CppMicroServices/core/src/util/usThreads_p.h
--- original/Modules/CppMicroServices/core/src/util/usThreads_p.h	2018-02-26 17:02:31.000000000 -0800
+++ patch/Modules/CppMicroServices/core/src/util/usThreads_p.h	2018-04-18 09:56:33.000000000 -0700
@@ -59,6 +59,13 @@
     #endif
     #include <windows.h>

+    // 2016-12-09 - problems with maro replacement on msvc 2013
+    #ifdef UNICODE
+    #define CreateMutex  CreateMutexW
+    #else
+    #define CreateMutex  CreateMutexA
+    #endif // !UNICODE
+
     #define US_THREADS_MUTEX(x)           HANDLE (x);
     #define US_THREADS_MUTEX_INIT(x)
     #define US_THREADS_MUTEX_CTOR(x)      : x(::CreateMutex(nullptr, FALSE, nullptr))
diff -rupN original/Modules/Python/autoload/PythonService/mitkPythonService.cpp patch/Modules/Python/autoload/PythonService/mitkPythonService.cpp
--- original/Modules/Python/autoload/PythonService/mitkPythonService.cpp	2018-05-28 17:36:41.000000000 -0700
+++ patch/Modules/Python/autoload/PythonService/mitkPythonService.cpp	2018-06-01 20:12:13.000000000 -0700
@@ -61,9 +61,9 @@ mitk::PythonService::PythonService()
       //TODO a better way to do this
 #ifndef WIN32
 #if defined (__APPLE__) || defined(MACOSX)
-      const char* library = "libpython${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}.dylib";
+      const char* library = "libpython${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}m.dylib";
 #else
-      const char* library = "libpython${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}.so";
+      const char* library = "libpython${PYTHON_VERSION_MAJOR}.${PYTHON_VERSION_MINOR}m.so";
 #endif
       dlerror();
       if(dlopen(library, RTLD_NOW | RTLD_GLOBAL) == 0 )
diff -rupN original/Plugins/PluginList.cmake patch/Plugins/PluginList.cmake
--- original/Plugins/PluginList.cmake	2018-02-26 16:59:24.000000000 -0800
+++ patch/Plugins/PluginList.cmake	2018-04-18 12:01:23.000000000 -0700
@@ -35,8 +35,8 @@ set(MITK_PLUGINS
   org.mitk.gui.qt.datamanager:ON
   org.mitk.gui.qt.datamanagerlight:OFF
   org.mitk.gui.qt.properties:ON
-  org.mitk.gui.qt.basicimageprocessing:OFF
-  org.mitk.gui.qt.dicom:OFF
+  org.mitk.gui.qt.basicimageprocessing:ON
+  org.mitk.gui.qt.dicom:ON
   org.mitk.gui.qt.dicominspector:OFF
   org.mitk.gui.qt.diffusionimaging:OFF
   org.mitk.gui.qt.diffusionimaging.connectomics:OFF
@@ -53,20 +53,20 @@ set(MITK_PLUGINS
   org.mitk.gui.qt.diffusionimaging.tractography:OFF
   org.mitk.gui.qt.diffusionimaging.python:OFF
   org.mitk.gui.qt.dosevisualization:OFF
-  org.mitk.gui.qt.geometrytools:OFF
+  org.mitk.gui.qt.geometrytools:ON
   org.mitk.gui.qt.igtexamples:OFF
   org.mitk.gui.qt.igttracking:OFF
   org.mitk.gui.qt.lasercontrol:OFF
   org.mitk.gui.qt.openigtlink:OFF
-  org.mitk.gui.qt.imagecropper:OFF
+  org.mitk.gui.qt.imagecropper:ON
   org.mitk.gui.qt.imagenavigator:ON
   org.mitk.gui.qt.viewnavigator:OFF
   org.mitk.gui.qt.materialeditor:OFF
-  org.mitk.gui.qt.measurementtoolbox:OFF
+  org.mitk.gui.qt.measurementtoolbox:ON
   org.mitk.gui.qt.moviemaker:OFF
   org.mitk.gui.qt.pointsetinteraction:OFF
   org.mitk.gui.qt.pointsetinteractionmultispectrum:OFF
-  org.mitk.gui.qt.python:OFF
+  org.mitk.gui.qt.python:ON
   org.mitk.gui.qt.remeshing:OFF
   org.mitk.gui.qt.segmentation:OFF
   org.mitk.gui.qt.aicpregistration:OFF
@@ -79,12 +79,12 @@ set(MITK_PLUGINS
   org.mitk.gui.qt.photoacoustics.imageprocessing:OFF
   org.mitk.gui.qt.photoacoustics.simulation:OFF
   org.mitk.gui.qt.ultrasound:OFF
-  org.mitk.gui.qt.volumevisualization:OFF
+  org.mitk.gui.qt.volumevisualization:ON
   org.mitk.gui.qt.eventrecorder:OFF
   org.mitk.gui.qt.xnat:OFF
   org.mitk.gui.qt.igt.app.echotrack:OFF
   org.mitk.gui.qt.spectrocamrecorder:OFF
-  org.mitk.gui.qt.classificationsegmentation:OFF
+  org.mitk.gui.qt.classificationsegmentation:ON
   org.mitk.gui.qt.overlaymanager:OFF
   org.mitk.gui.qt.igt.app.hummelprotocolmeasurements:OFF
   org.mitk.gui.qt.multilabelsegmentation:OFF
