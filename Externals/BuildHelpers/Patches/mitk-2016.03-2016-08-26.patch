Only in mitk-2016.03/: .git
diff -aur mitk-2016.03/CMake/mitkFunctionCreateModule.cmake SV16-patches-2016.08.15-mitk-2016.03.0/CMake/mitkFunctionCreateModule.cmake
--- mitk-2016.03/CMake/mitkFunctionCreateModule.cmake	2016-08-15 21:09:58.133162400 -0700
+++ SV16-patches-2016.08.15-mitk-2016.03.0/CMake/mitkFunctionCreateModule.cmake	2016-08-26 00:06:36.887246300 -0700
@@ -339,7 +339,7 @@
       set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)
     endif()
 
-    if(MODULE_WARNINGS_AS_ERRORS)
+    if(MODULE_WARNINGS_AS_ERRORS_IGNORED)
       if(MSVC_VERSION)
         mitkFunctionCheckCAndCXXCompilerFlags("/WX" module_c_flags module_cxx_flags)
       else()
diff -aur mitk-2016.03/CMake/mitkMacroCreateExecutable.cmake SV16-patches-2016.08.15-mitk-2016.03.0/CMake/mitkMacroCreateExecutable.cmake
--- mitk-2016.03/CMake/mitkMacroCreateExecutable.cmake	2016-08-15 21:09:58.195669600 -0700
+++ SV16-patches-2016.08.15-mitk-2016.03.0/CMake/mitkMacroCreateExecutable.cmake	2016-08-26 00:07:33.880579200 -0700
@@ -50,7 +50,7 @@
   if(EXEC_NO_INIT)
     list(APPEND _EXEC_OPTIONS NO_INIT)
   endif()
-  if(EXEC_WARNINGS_AS_ERRORS)
+  if(EXEC_WARNINGS_AS_ERRORS_IGNORED)
     list(APPEND _EXEC_OPTIONS WARNINGS_AS_ERRORS)
   endif()
   if(EXEC_NO_FEATURE_INFO)
diff -aur mitk-2016.03/CMake/PackageDepends/MITK_VTK_Config.cmake SV16-patches-2016.08.15-mitk-2016.03.0/CMake/PackageDepends/MITK_VTK_Config.cmake
--- mitk-2016.03/CMake/PackageDepends/MITK_VTK_Config.cmake	2016-08-15 21:09:58.071151400 -0700
+++ SV16-patches-2016.08.15-mitk-2016.03.0/CMake/PackageDepends/MITK_VTK_Config.cmake	2016-08-15 21:13:10.339581500 -0700
@@ -1,4 +1,5 @@
-find_package(VTK COMPONENTS ${VTK_REQUIRED_COMPONENTS_BY_MODULE} REQUIRED)
+#find_package(VTK COMPONENTS ${VTK_REQUIRED_COMPONENTS_BY_MODULE} REQUIRED)
+find_package(VTK REQUIRED)
 if(VTK_FOUND AND NOT VTK_BUILD_SHARED_LIBS)
   message(FATAL_ERROR "MITK only supports a VTK which was built with shared libraries. Turn on BUILD_SHARED_LIBS in your VTK config.")
 endif()
diff -aur mitk-2016.03/CMakeExternals/CTK.cmake SV16-patches-2016.08.15-mitk-2016.03.0/CMakeExternals/CTK.cmake
--- mitk-2016.03/CMakeExternals/CTK.cmake	2016-08-15 21:09:20.016657600 -0700
+++ SV16-patches-2016.08.15-mitk-2016.03.0/CMakeExternals/CTK.cmake	2016-08-15 21:13:23.877383800 -0700
@@ -26,6 +26,12 @@
         list(APPEND proj_DEPENDENCIES Python)
       endif()
       list(APPEND ctk_optional_cache_args
+           if(DEFINED EXTERNAL_VTK_DIR)
+	     -DVTK_DIR:PATH=${EXTERNAL_VTK_DIR}
+	   endif()
+           -DCTK_LIB_Visualization/VTK/Core:BOOL=ON
+           -DCTK_LIB_Scripting/Python/Core:BOOL=ON
+	   -DCTK_LIB_Scripting/Python/Core_PYTHONQT_USE_VTK:BOOL=ON
            -DCTK_LIB_Scripting/Python/Widgets:BOOL=ON
            -DCTK_ENABLE_Python_Wrapping:BOOL=ON
            -DCTK_APP_ctkSimplePythonShell:BOOL=ON
diff -aur mitk-2016.03/CMakeExternals/SimpleITK.cmake SV16-patches-2016.08.15-mitk-2016.03.0/CMakeExternals/SimpleITK.cmake
--- mitk-2016.03/CMakeExternals/SimpleITK.cmake	2016-08-15 21:09:20.214684900 -0700
+++ SV16-patches-2016.08.15-mitk-2016.03.0/CMakeExternals/SimpleITK.cmake	2016-08-15 21:13:28.508502100 -0700
@@ -111,7 +111,8 @@
 
       if( MITK_USE_SYSTEM_PYTHON )
         ExternalProject_Add_Step(${proj} sitk_python_install_step
-          COMMAND PYTHONUSERBASE=${_install_dir} ${PYTHON_EXECUTABLE} setup.py install --prefix=${_install_dir}
+          #COMMAND PYTHONUSERBASE=${_install_dir} ${PYTHON_EXECUTABLE} setup.py install --prefix=${_install_dir}
+	  #COMMAND ${PYTHON_EXECUTABLE} setup.py install --prefix=${_install_dir}
           DEPENDEES install
           WORKING_DIRECTORY ${_sitk_build_dir}/Wrapping/PythonPackage
         )
diff -aur mitk-2016.03/Modules/Core/CMakeLists.txt SV16-patches-2016.08.15-mitk-2016.03.0/Modules/Core/CMakeLists.txt
--- mitk-2016.03/Modules/Core/CMakeLists.txt	2016-08-15 21:09:36.168716800 -0700
+++ SV16-patches-2016.08.15-mitk-2016.03.0/Modules/Core/CMakeLists.txt	2016-08-15 21:13:56.349620400 -0700
@@ -73,6 +73,6 @@
   target_link_libraries(${MODULE_TARGET} PRIVATE psapi.lib)
 endif(MSVC_IDE OR MSVC_VERSION OR MINGW)
 
-add_subdirectory(TestingHelper)
+#add_subdirectory(TestingHelper)
 
-add_subdirectory(test)
+#add_subdirectory(test)
diff -aur mitk-2016.03/Modules/Core/include/mitkExtractSliceFilter.h SV16-patches-2016.08.15-mitk-2016.03.0/Modules/Core/include/mitkExtractSliceFilter.h
--- mitk-2016.03/Modules/Core/include/mitkExtractSliceFilter.h	2016-08-15 21:09:33.394367600 -0700
+++ SV16-patches-2016.08.15-mitk-2016.03.0/Modules/Core/include/mitkExtractSliceFilter.h	2016-08-15 17:46:01.253999100 -0700
@@ -85,6 +85,10 @@
     /** \brief Resampling grid corresponds to: false->image    true->worldgeometry*/
     void SetInPlaneResampleExtentByGeometry(bool inPlaneResampleExtentByGeometry){ this->m_InPlaneResampleExtentByGeometry = inPlaneResampleExtentByGeometry; }
 
+    void SetInPlaneResampleSizeByGeometry(bool inPlaneResampleSizeByGeometry){ this->m_InPlaneResampleSizeByGeometry = inPlaneResampleSizeByGeometry; }
+
+    void SetInPlaneResampleExtentByMinimumSpacing(bool inPlaneResampleExtentByMinimumSpacing){this->m_InPlaneResampleExtentByMinimumSpacing = inPlaneResampleExtentByMinimumSpacing;}
+
     /** \brief Sets the output dimension of the slice*/
     void SetOutputDimensionality(unsigned int dimension){ this->m_OutputDimension = dimension; }
 
@@ -168,6 +172,10 @@
 
     bool m_InPlaneResampleExtentByGeometry;//Resampling grid corresponds to:  false->image    true->worldgeometry
 
+    bool m_InPlaneResampleSizeByGeometry;//Use Renderer Plane extents
+
+    bool m_InPlaneResampleExtentByMinimumSpacing;
+
     mitk::ScalarType* m_OutPutSpacing;
 
     bool m_VtkOutputRequested;
diff -aur mitk-2016.03/Modules/Core/src/Algorithms/mitkExtractSliceFilter.cpp SV16-patches-2016.08.15-mitk-2016.03.0/Modules/Core/src/Algorithms/mitkExtractSliceFilter.cpp
--- mitk-2016.03/Modules/Core/src/Algorithms/mitkExtractSliceFilter.cpp	2016-08-15 21:09:36.808800200 -0700
+++ SV16-patches-2016.08.15-mitk-2016.03.0/Modules/Core/src/Algorithms/mitkExtractSliceFilter.cpp	2016-08-15 17:45:56.734423100 -0700
@@ -36,6 +36,8 @@
   m_InterpolationMode = ExtractSliceFilter::RESLICE_NEAREST;
   m_ResliceTransform = nullptr;
   m_InPlaneResampleExtentByGeometry = false;
+  m_InPlaneResampleSizeByGeometry = false;
+  m_InPlaneResampleExtentByMinimumSpacing = false;
   m_OutPutSpacing = new mitk::ScalarType[2];
   m_OutputDimension = 2;
   m_ZSpacing = 1.0;
@@ -186,8 +188,15 @@
         // Resampling grid corresponds to the current world geometry. This
         // means that the spacing of the output 2D image depends on the
         // currently selected world geometry, and *not* on the image itself.
-        extent[0] = m_WorldGeometry->GetExtent( 0 );
-        extent[1] = m_WorldGeometry->GetExtent( 1 );
+        extent[0] = planeGeometry->GetExtent( 0 );
+        extent[1] = planeGeometry->GetExtent( 1 );
+      }
+      else if(m_InPlaneResampleExtentByMinimumSpacing)
+      {
+    	    const mitk::Vector3D &imageSpacing = inputTimeGeometry->GetGeometryForTimeStep(0)->GetSpacing();
+            double minSpacing=std::min(imageSpacing[0],std::min(imageSpacing[1],imageSpacing[2]));
+            extent[0]=planeGeometry->GetExtentInMM( 0 )/minSpacing;
+            extent[1]=planeGeometry->GetExtentInMM( 1 )/minSpacing;
       }
       else
       {
@@ -305,12 +314,14 @@
   int xMin, xMax, yMin, yMax;
 
   xMin = yMin = 0;
-  xMax = static_cast< int >( extent[0]);
-  yMax = static_cast< int >( extent[1]);
+  xMax = static_cast< int >( std::round(extent[0]));
+  yMax = static_cast< int >( std::round(extent[1]));
 
-  double sliceBounds[6];
-  if (m_WorldGeometry->GetReferenceGeometry())
+  if(!m_InPlaneResampleSizeByGeometry)
   {
+   double sliceBounds[6];
+   if (m_WorldGeometry->GetReferenceGeometry())
+   {
     for (auto & sliceBound : sliceBounds)
     {
       sliceBound = 0.0;
@@ -324,8 +335,8 @@
       yMin = static_cast< int >( sliceBounds[2] / m_OutPutSpacing[1] + 0.5 );
       yMax = static_cast< int >( sliceBounds[3] / m_OutPutSpacing[1] + 0.5 );
     } // ELSE we use the default values
+   }
   }
-
   // Set the output extents! First included pixel index and last included pixel index
   // xMax and yMax are one after the last pixel. so they have to be decremented by 1.
   // In case we have a 2D image, xMax or yMax might be 0. in this case, do not decrement, but take 0.
diff -aur mitk-2016.03/Modules/Core/src/DataManagement/mitkSlicedGeometry3D.cpp SV16-patches-2016.08.15-mitk-2016.03.0/Modules/Core/src/DataManagement/mitkSlicedGeometry3D.cpp
--- mitk-2016.03/Modules/Core/src/DataManagement/mitkSlicedGeometry3D.cpp	2016-08-15 21:09:37.123837000 -0700
+++ SV16-patches-2016.08.15-mitk-2016.03.0/Modules/Core/src/DataManagement/mitkSlicedGeometry3D.cpp	2016-08-15 17:45:57.268487700 -0700
@@ -65,7 +65,7 @@
       }
       else
       {
-        PlaneGeometry* geometry2D = other.m_PlaneGeometries[s]->Clone();
+        PlaneGeometry::Pointer geometry2D = other.m_PlaneGeometries[s]->Clone();
         assert(geometry2D!=nullptr);
         SetPlaneGeometry(geometry2D, s);
       }
diff -aur mitk-2016.03/Modules/Core/src/Rendering/mitkImageVtkMapper2D.cpp SV16-patches-2016.08.15-mitk-2016.03.0/Modules/Core/src/Rendering/mitkImageVtkMapper2D.cpp
--- mitk-2016.03/Modules/Core/src/Rendering/mitkImageVtkMapper2D.cpp	2016-08-15 21:09:37.381864900 -0700
+++ SV16-patches-2016.08.15-mitk-2016.03.0/Modules/Core/src/Rendering/mitkImageVtkMapper2D.cpp	2016-08-15 17:45:57.892565700 -0700
@@ -52,6 +52,8 @@
 #include <vtkCellArray.h>
 #include <vtkCamera.h>
 #include <vtkColorTransferFunction.h>
+#include <vtkImageGradientMagnitude.h>
+#include <vtkImageHistogramStatistics.h>
 
 //ITK
 #include <itkRGBAPixel.h>
@@ -166,6 +168,13 @@
   datanode->GetBoolProperty("in plane resample extent by geometry", inPlaneResampleExtentByGeometry, renderer);
   localStorage->m_Reslicer->SetInPlaneResampleExtentByGeometry(inPlaneResampleExtentByGeometry);
 
+  bool inPlaneResampleSizeByGeometry = false;
+  datanode->GetBoolProperty("in plane resample size by geometry", inPlaneResampleSizeByGeometry, renderer);
+  localStorage->m_Reslicer->SetInPlaneResampleSizeByGeometry(inPlaneResampleSizeByGeometry);
+
+  bool inPlaneResampleExtentByMinimumSpacing = false;
+  datanode->GetBoolProperty("in plane resample extent by minimum spacing", inPlaneResampleExtentByMinimumSpacing, renderer);
+  localStorage->m_Reslicer->SetInPlaneResampleExtentByMinimumSpacing(inPlaneResampleExtentByMinimumSpacing);
 
   // Initialize the interpolation mode for resampling; switch to nearest
   // neighbor if the input image is too small.
@@ -288,6 +297,60 @@
     localStorage->m_ReslicedImage = localStorage->m_Reslicer->GetVtkOutput();
   }
 
+  bool showGradient= false;
+  datanode->GetBoolProperty("show gradient", showGradient, renderer);
+  if (showGradient)
+  {
+	  vtkSmartPointer<vtkImageGradientMagnitude> gradientFilter = vtkSmartPointer<vtkImageGradientMagnitude>::New();
+      gradientFilter->HandleBoundariesOn();
+      gradientFilter->SetInputData(localStorage->m_ReslicedImage);
+      gradientFilter->Update();
+
+      // "background" pixels produce very large gradients at border
+      int extent[6];
+      gradientFilter->GetOutput()->GetExtent(extent);
+
+      for (int y = extent[2]; y <=extent[3] ; ++y)
+      {
+          for (int x = extent[0]; x <= extent[1]; ++x)
+          {
+              if (fabsf(localStorage->m_ReslicedImage->GetScalarComponentAsDouble(x, y, 0, 0) - (-32768.0)) < 1e-3)
+              {
+            	  gradientFilter->GetOutput()->SetScalarComponentFromDouble(x, y, 0, 0, 0);
+              }
+
+              int offsets[][2] = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };
+
+              for (size_t i = 0; i < sizeof(offsets) / sizeof(offsets[0]); ++i) {
+                  int xoff = x + offsets[i][0];
+                  int yoff = y + offsets[i][1];
+
+                  if (xoff < extent[0] || xoff > extent[1] || yoff < extent[2] || yoff > extent[3]) {
+                      continue;
+                  }
+
+                  if (fabsf(localStorage->m_ReslicedImage->GetScalarComponentAsDouble(xoff, yoff, 0, 0) - (-32768.0)) < 1e-3)
+                  {
+                	  gradientFilter->GetOutput()->SetScalarComponentFromDouble(x, y, 0, 0, 0);
+                      break;
+                  }
+              }
+          }
+      }
+
+      localStorage->m_ReslicedImage = gradientFilter->GetOutput();
+
+      vtkSmartPointer<vtkImageHistogramStatistics> stats = vtkSmartPointer<vtkImageHistogramStatistics>::New();
+      stats->SetInputData(localStorage->m_ReslicedImage);
+      stats->GenerateHistogramImageOff();
+      stats->Update();
+
+      mitk::LevelWindow levelWindow;
+      levelWindow.SetRangeMinMax(stats->GetAutoRange()[0], stats->GetAutoRange()[1]);
+      levelWindow.SetWindowBounds(stats->GetAutoRange()[0], stats->GetAutoRange()[1]);
+      datanode->SetLevelWindow(levelWindow, renderer, "gradientlevelwindow");
+  }
+
   // Bounds information for reslicing (only reuqired if reference geometry
   // is present)
   //this used for generating a vtkPLaneSource with the right size
@@ -296,7 +359,20 @@
   {
     sliceBound = 0.0;
   }
-  localStorage->m_Reslicer->GetClippedPlaneBounds(sliceBounds);
+
+  if(inPlaneResampleSizeByGeometry)
+  {
+      double widthInMM = planeGeometry->GetExtentInMM( 0 );
+      double heightInMM = planeGeometry->GetExtentInMM( 1 );
+      sliceBounds[0] = 0.0;
+      sliceBounds[1] = widthInMM;
+      sliceBounds[2] = 0.0;
+      sliceBounds[3] = heightInMM;
+  }
+  else
+  {
+    localStorage->m_Reslicer->GetClippedPlaneBounds(sliceBounds);
+  }
 
   //get the spacing of the slice
   localStorage->m_mmPerPixel = localStorage->m_Reslicer->GetOutputSpacing();
@@ -308,16 +384,29 @@
     {
       textureClippingBound = 0.0;
     }
-    // Calculate the actual bounds of the transformed plane clipped by the
-    // dataset bounding box; this is required for drawing the texture at the
-    // correct position during 3D mapping.
-    mitk::PlaneClipping::CalculateClippedPlaneBounds( input->GetGeometry(), planeGeometry, textureClippingBounds );
-
-    textureClippingBounds[0] = static_cast< int >( textureClippingBounds[0] / localStorage->m_mmPerPixel[0] + 0.5 );
-    textureClippingBounds[1] = static_cast< int >( textureClippingBounds[1] / localStorage->m_mmPerPixel[0] + 0.5 );
-    textureClippingBounds[2] = static_cast< int >( textureClippingBounds[2] / localStorage->m_mmPerPixel[1] + 0.5 );
-    textureClippingBounds[3] = static_cast< int >( textureClippingBounds[3] / localStorage->m_mmPerPixel[1] + 0.5 );
 
+    if(inPlaneResampleSizeByGeometry)
+    {
+        double widthInMM = planeGeometry->GetExtentInMM( 0 );
+        double heightInMM = planeGeometry->GetExtentInMM( 1 );
+
+        textureClippingBounds[0] = 0.0;
+        textureClippingBounds[1] = widthInMM / localStorage->m_mmPerPixel[0];
+        textureClippingBounds[2] = 0.0;
+        textureClippingBounds[3] = heightInMM / localStorage->m_mmPerPixel[1];
+    }
+    else
+    {
+        // Calculate the actual bounds of the transformed plane clipped by the
+        // dataset bounding box; this is required for drawing the texture at the
+        // correct position during 3D mapping.
+        mitk::PlaneClipping::CalculateClippedPlaneBounds( input->GetGeometry(), planeGeometry, textureClippingBounds );
+
+        textureClippingBounds[0] = static_cast< int >( textureClippingBounds[0] / localStorage->m_mmPerPixel[0] + 0.5 );
+        textureClippingBounds[1] = static_cast< int >( textureClippingBounds[1] / localStorage->m_mmPerPixel[0] + 0.5 );
+        textureClippingBounds[2] = static_cast< int >( textureClippingBounds[2] / localStorage->m_mmPerPixel[1] + 0.5 );
+        textureClippingBounds[3] = static_cast< int >( textureClippingBounds[3] / localStorage->m_mmPerPixel[1] + 0.5 );
+    }
     //clipping bounds for cutting the image
     localStorage->m_LevelWindowFilter->SetClippingBounds(textureClippingBounds);
   }
@@ -439,7 +528,10 @@
   LocalStorage *localStorage = this->GetLocalStorage( renderer );
 
   LevelWindow levelWindow;
-  this->GetDataNode()->GetLevelWindow( levelWindow, renderer, "levelwindow" );
+//  this->GetDataNode()->GetLevelWindow( levelWindow, renderer, "levelwindow" );
+  bool showGradient = false;
+  this->GetDataNode()->GetBoolProperty("show gradient", showGradient, renderer);
+  this->GetDataNode()->GetLevelWindow( levelWindow, renderer, showGradient? "gradientlevelwindow" : "levelwindow" );
   localStorage->m_LevelWindowFilter->GetLookupTable()->SetRange( levelWindow.GetLowerWindowBound(), levelWindow.GetUpperWindowBound() );
 
   mitk::LevelWindow opacLevelWindow;
@@ -591,7 +683,7 @@
   vtkLookupTable* usedLookupTable = localStorage->m_ColorLookupTable;
 
   // If lookup table or transferfunction use is requested...
-  mitk::LookupTableProperty::Pointer lookupTableProp = dynamic_cast<mitk::LookupTableProperty*>(this->GetDataNode()->GetProperty("LookupTable"));
+  mitk::LookupTableProperty::Pointer lookupTableProp = dynamic_cast<mitk::LookupTableProperty*>(this->GetDataNode()->GetProperty("LookupTable", renderer));
 
   if( lookupTableProp.IsNotNull() ) // is a lookuptable set?
   {
@@ -686,6 +778,8 @@
   else node->AddProperty( "reslice interpolation", mitk::VtkResliceInterpolationProperty::New() );
   node->AddProperty( "texture interpolation", mitk::BoolProperty::New( false ) );
   node->AddProperty( "in plane resample extent by geometry", mitk::BoolProperty::New( false ) );
+  node->AddProperty( "in plane resample size by geometry", mitk::BoolProperty::New( false ) );
+  node->AddProperty( "in plane resample extent by minimum spacing", mitk::BoolProperty::New( false ) );
   node->AddProperty( "bounding box", mitk::BoolProperty::New( false ) );
 
   mitk::RenderingModeProperty::Pointer renderingModeProperty = mitk::RenderingModeProperty::New();
diff -aur mitk-2016.03/Modules/Core/src/Rendering/mitkPlaneGeometryDataVtkMapper3D.cpp SV16-patches-2016.08.15-mitk-2016.03.0/Modules/Core/src/Rendering/mitkPlaneGeometryDataVtkMapper3D.cpp
--- mitk-2016.03/Modules/Core/src/Rendering/mitkPlaneGeometryDataVtkMapper3D.cpp	2016-08-15 21:09:37.389368400 -0700
+++ SV16-patches-2016.08.15-mitk-2016.03.0/Modules/Core/src/Rendering/mitkPlaneGeometryDataVtkMapper3D.cpp	2016-08-15 17:45:58.049588500 -0700
@@ -310,6 +310,13 @@
         tubeRadius = sqrt( m_SurfaceCreator->GetBoundingBox()->GetDiagonalLength2() ) / 450.0;
       }
 
+      bool useGeometryBoundingBox = false;
+      if(GetDataNode()->GetBoolProperty("in plane resample size by geometry", useGeometryBoundingBox, renderer))
+      {
+          if(useGeometryBoundingBox)
+        	  m_SurfaceCreator->SetUseBoundingBox(false);
+      }
+
       // Calculate the surface of the PlaneGeometry
       m_SurfaceCreator->Update();
       Surface *surface = m_SurfaceCreator->GetOutput();
diff -aur mitk-2016.03/Plugins/PluginList.cmake SV16-patches-2016.08.15-mitk-2016.03.0/Plugins/PluginList.cmake
--- mitk-2016.03/Plugins/PluginList.cmake	2016-08-15 21:09:41.738436000 -0700
+++ SV16-patches-2016.08.15-mitk-2016.03.0/Plugins/PluginList.cmake	2016-08-15 21:14:12.845800000 -0700
@@ -37,26 +37,26 @@
   org.mitk.gui.qt.datamanager:ON
   org.mitk.gui.qt.datamanagerlight:OFF
   org.mitk.gui.qt.properties:ON
-  org.mitk.gui.qt.basicimageprocessing:OFF
-  org.mitk.gui.qt.dicom:OFF
+  org.mitk.gui.qt.basicimageprocessing:ON
+  org.mitk.gui.qt.dicom:ON
   org.mitk.gui.qt.diffusionimaging:OFF
   org.mitk.gui.qt.dosevisualization:OFF
-  org.mitk.gui.qt.geometrytools:OFF
+  org.mitk.gui.qt.geometrytools:ON
   org.mitk.gui.qt.igtexamples:OFF
   org.mitk.gui.qt.igttracking:OFF
   org.mitk.gui.qt.openigtlink:OFF
-  org.mitk.gui.qt.imagecropper:OFF
+  org.mitk.gui.qt.imagecropper:ON
   org.mitk.gui.qt.imagenavigator:ON
   org.mitk.gui.qt.viewnavigator:OFF
   org.mitk.gui.qt.materialeditor:OFF
-  org.mitk.gui.qt.measurementtoolbox:OFF
+  org.mitk.gui.qt.measurementtoolbox:ON
   org.mitk.gui.qt.moviemaker:OFF
   org.mitk.gui.qt.pointsetinteraction:OFF
   org.mitk.gui.qt.pointsetinteractionmultispectrum:OFF
-  org.mitk.gui.qt.python:OFF
+  org.mitk.gui.qt.python:ON
   org.mitk.gui.qt.registration:OFF
   org.mitk.gui.qt.remeshing:OFF
-  org.mitk.gui.qt.segmentation:OFF
+  org.mitk.gui.qt.segmentation:ON
   org.mitk.gui.qt.simulation:OFF
   org.mitk.gui.qt.aicpregistration:OFF
   org.mitk.gui.qt.toftutorial:OFF
@@ -64,7 +64,7 @@
   org.mitk.gui.qt.tubegraph:OFF
   org.mitk.gui.qt.ugvisualization:OFF
   org.mitk.gui.qt.ultrasound:OFF
-  org.mitk.gui.qt.volumevisualization:OFF
+  org.mitk.gui.qt.volumevisualization:ON
   org.mitk.gui.qt.eventrecorder:OFF
   org.mitk.gui.qt.xnat:OFF
   org.mitk.gui.qt.spectrocamrecorder:OFF
