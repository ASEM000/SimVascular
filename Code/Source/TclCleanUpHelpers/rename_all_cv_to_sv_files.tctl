proc file_find {dir wildcard args} {
  #author Nathan Wilson
  #@c This procedure recursively searches for
  #@c pattern and returns a tcl list of the files
  #@c matching pattern.
  #@a dir:  starting directory
  #@a wildcard: pattern to match
  #@a args:  optional return variable
  #@r status

  if {[llength $args] == 0} {
     set rtnme {}
  } else {
     upvar rtnme rtnme
  }

  foreach j $dir {
    set files [glob -nocomplain [file join $j $wildcard]]
    # print out headers
    foreach i $files {
      #puts "found file: $i"
      lappend rtnme $i
    }

    set files [glob -nocomplain [file join $j *]]
    foreach i $files {
      if {[file isdirectory $i] == 1} {
        file_find $i $wildcard 1
      }
    }
  }
  return [lsort -unique $rtnme]

}

if {0 == 1} {
    
exec rm -f rename_cv_files.txt

set ofn [open rename_cv_files.txt w]

foreach fn [file_find ../sv *.h*] {

    if {[file tail $fn] == "vtkGetBoundaryFaces.h"} {
	set newfn sv_vtkGetBoundaryFaces.h
    } elseif {[file tail $fn] == "eispack.h"} {
	set newfn sv_eispack.h
    } elseif {[string index [file tail $fn] 2] == "_"} {
	set newfn sv[string range [file tail $fn] 2 end]
    } else {
        set newfn sv_[string range [file tail $fn] 2 end]
    }
    puts $ofn "[file tail $fn] $newfn"
    
}

foreach fn [file_find ../sv *.cxx] {
    
    if {[file tail $fn] == "vtkGetBoundaryFaces.cxx"} {
	set newfn sv_vtkGetBoundaryFaces.cxx
    } elseif {[file tail $fn] == "eispack.cxx"} {
	set newfn sv_eispack.cxx
    } elseif {[string index [file tail $fn] 2] == "_"} {
	set newfn sv[string range [file tail $fn] 2 end]
    } else {    
	set newfn sv_[string range [file tail $fn] 2 end]
    }
    puts $ofn "[file tail $fn] $newfn"

}

foreach fn [file_find ../sv2 *.h*] {

    if {[file tail $fn] == "vtkGetBoundaryFaces.h"} {
	set newfn sv_vtkGetBoundaryFaces.h
    } elseif {[file tail $fn] == "eispack.h"} {
	set newfn sv_eispack.h
    } elseif {[string index [file tail $fn] 2] == "_"} {
	set newfn sv2[string range [file tail $fn] 2 end]
    } else {
        set newfn sv2_[string range [file tail $fn] 2 end]
    }
    puts $ofn "[file tail $fn] $newfn"
    
}

foreach fn [file_find ../sv2 *.cxx] {
    
    if {[file tail $fn] == "vtkGetBoundaryFaces.cxx"} {
	set newfn sv_vtkGetBoundaryFaces.cxx
    } elseif {[file tail $fn] == "eispack.cxx"} {
	set newfn sv_eispack.cxx
    } elseif {[string index [file tail $fn] 2] == "_"} {
	set newfn sv2[string range [file tail $fn] 2 end]
    } else {    
	set newfn sv2_[string range [file tail $fn] 2 end]
    }
    puts $ofn "[file tail $fn] $newfn"

}

foreach fn [file_find ../sv3 *.h*] {

    if {[file tail $fn] == "vtkGetBoundaryFaces.h"} {
	set newfn sv_vtkGetBoundaryFaces.h
    } elseif {[file tail $fn] == "eispack.h"} {
	set newfn sv_eispack.h
    } elseif {[string index [file tail $fn] 2] == "_"} {
	set newfn sv3[string range [file tail $fn] 2 end]
    } else {
        set newfn sv3_[string range [file tail $fn] 2 end]
    }
    puts $ofn "[file tail $fn] $newfn"
    
}

foreach fn [file_find ../sv3 *.cxx] {
    
    if {[file tail $fn] == "vtkGetBoundaryFaces.cxx"} {
	set newfn sv_vtkGetBoundaryFaces.cxx
    } elseif {[file tail $fn] == "eispack.cxx"} {
	set newfn sv_eispack.cxx
    } elseif {[string index [file tail $fn] 2] == "_"} {
	set newfn sv3[string range [file tail $fn] 2 end]
    } else {    
	set newfn sv3_[string range [file tail $fn] 2 end]
    }
    puts $ofn "[file tail $fn] $newfn"

}

close $ofn

}

exec mkdir -p tmp
exec rm -f tmp/sed-rename-cv-files.txt
exec rm -f tmp/git-changes-to-commit.txt

set infn [open rename_all_cv_files.txt r]

catch {unset mapping}

set ofn [open tmp/sed-rename-cv-files.txt w]
while {[gets $infn line] >= 0} {
    set thing [string trim $line]
    if {$thing == ""} continue
    set orgfn [lindex $thing 0]
    set orgfn [file rootname $orgfn]\\[file extension $orgfn]
    set newfn [lindex $thing 1]
    set newfn [file rootname $newfn]\\[file extension $newfn]
    puts $ofn "s+$orgfn+$newfn+g"
    set mapping([lindex $thing 0]) [lindex $thing 1]
}
close $ofn
close $infn

set all_dirs {../Application ../Include ../sv ../sv2 ../sv3 ../sv4gui ../vtkSV}

exec rm -Rf updated
exec mkdir updated

set gitfn [open tmp/git-changes-to-commit.txt w]

foreach extension {*.cxx *.h *.hxx files.cmake Makefile *.ui CMakeLists.txt} {
foreach fn [file_find $all_dirs $extension] {
    set fn [string range $fn 3 end]
    set newfn [file tail $fn]
    if {![catch {set newfn $mapping([file tail $fn])} msg]} {
      puts $gitfn "git rm $fn"
      puts $gitfn "git add [file dirname $fn]/$newfn"
    }
    puts "working on fn: $fn  ($newfn)"
    exec mkdir -p updated/[file dirname $fn]
    exec sed -f tmp/sed-rename-cv-files.txt ../$fn > updated/[file dirname $fn]/$newfn
    catch {exec d2u updated/[file dirname $fn]/$newfn}
}
}

foreach fn [file_find $all_dirs *] {

    if [file isdirectory $fn] continue 
    if {[file extension $fn] == ".h"} continue
    if {[file extension $fn] == ".hxx"} continue
    if {[file extension $fn] == ".ui"} continue
    if {[file extension $fn] == ".cxx"} continue
    if {[file tail $fn] == "Makefile"} continue
    if {[file tail $fn] == "CMakeLists.txt"} continue
    if {[file tail $fn] == "files.cmake"} continue
    
    set newfn [file tail $fn]
    puts "copying fn: $fn  ($newfn)"
    exec mkdir -p updated/[string range [file dirname $fn] 3 end]
    exec cp $fn updated/[string range [file dirname $fn] 3 end]/$newfn

}

close $gitfn

